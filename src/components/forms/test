import { useState } from "react";
import { AppConfig } from "../../types/config-type";
import { SubmitHandler, useForm } from "react-hook-form";
import toast, { Toaster } from "react-hot-toast";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import Button from "../ui/Button";
import PopoverSizes from "../ui/PopoverSizes";
import Input from "../ui/Input";

import "./Forms.css";

const MAX_FILE_SIZE = 5000000;

function checkFileType(file: File) {
  if (file?.name) {
    const fileType = file.name.split(".").pop();
    if (
      fileType === "mp4" ||
      fileType === "avi" ||
      fileType === "mov" ||
      fileType === "mkv" ||
      fileType === "wmv" ||
      fileType === "flv"
    ) {
      return true;
    }
  }
  return false;
}

const FormContent = ({
  option,
  updateAppConfigValue,
}: {
  option: string;
  updateAppConfigValue: (newConfig: AppConfig) => void;
}) => {
  const schema = z.object({
    id: z.string().uuid(),
    inputValueVideoUrl: z.string(),
    inputValueVideoPath: z.object({}),
    selectedTranscriptionModels: z.object({
      modelName: z.string(),
      modelSize: z.string().optional(), /// TIRAR OPCIONAL
    }),
    selectedAiModels: z.object({
      modelName: z.string(),
      modelSize: z.string().optional(), /// TIRAR OPCIONAL
    }),
    textProcessingOption: z.string(),
    inputValueKey: z.string(),
  });

  type FormFields = z.infer<typeof schema>;

  const {
    register,
    handleSubmit,
    setError,
    formState: { errors, isSubmitting },
    clearErrors,
  } = useForm<FormFields>({ resolver: zodResolver(schema) });

  const onSubmit: SubmitHandler<FormFields> = async (data) => {
    console.log(data);
    try {
      await new Promise((resolve) => setTimeout(resolve, 1000));
      console.log("Form submitted:", data);
    } catch (error) {
      setError("inputValueVideoUrl", {
        message: "This path video is invalid",
      });
    }
  };

  const handleClearOption = (
    register:
      | "id"
      | "inputValueVideoUrl"
      | "inputValueVideoPath"
      | "selectedTranscriptionModels"
      | "selectedAiModels"
      | "textProcessingOption"
  ) => {
    clearErrors(register);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      {option === "url" ? (
        <>
          <input
            {...register("inputValueVideoUrl")}
            onChange={() => {
              handleClearOption("inputValueVideoUrl");
            }}
          />
          <span>
            {errors.inputValueVideoUrl ? errors.inputValueVideoUrl.message : ""}
          </span>
        </>
      ) : (
        <>
          <input
            type="file"
            accept=".mp4, .avi, .mov, .mkv, .wmv, .flv"
            {...register("inputValueVideoPath")}
            onChange={() => {
              handleClearOption("inputValueVideoPath");
            }}
          />
          <span>
            {errors.inputValueVideoPath
              ? errors.inputValueVideoPath.message
              : ""}
          </span>
        </>
      )}
      <div className="transcription-ia-container">
        <hr className="horizontal-line" />
        <h4>Type Transcription</h4>
        <div className="transcription-options">
          <button disabled={isSubmitting} type="submit">
            {isSubmitting ? "Loading" : "Submit"}
          </button>
        </div>
      </div>
      <Toaster position="bottom-right" />
    </form>
  );
};

export default FormContent;
